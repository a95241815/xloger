#!/usr/bin/env node
/**
 * xloger command-line interface
 * use:
 *	xloger --help to get help.
 *	xloger start to start a daemon service.
 *	xloger stop to stop the server.
 */

var pwd = __dirname
,	os = require('os')
,	fs = require("fs")
,	path = require('path')
,	program  = require('commander')
,	jsonfile = require('jsonfile')
,	defs = require("../defaults.json")
,	pkg	 = require("../package")
,	forever = require('xforever')
,	execSync = require('child_process').execSync
;

// detect the default config file: xloger.json
// POSIX: /etc/xloger.json
// Win32: SysDriver:\windows\system32\xloger.json
var uconf = null;
switch(os.platform().toLowerCase()){
	case "win32":
		var sysdriver = path.parse(os.os.homedir())['root'];
		uconf = path.join(path.parse(os.os.homedir())['root'], "windows", "system32", "webjet.json");
		break;
	default:
		uconf = "/etc/webjet.json";
}

var	runtime_file = path.join(pwd, "../runtime.json")
,	app_script = path.join(pwd, "../webjet.js");

// assign the version from package.json
program.version(pkg.version);

/**
 * start command
 */
program
	.command('start')
	.description('start webjet.')
	.option("-p, --port", "the port webjet listened, default: 9009")
	.option("-c, --config", "path to config file which format whith json.\n\t\t  default:"+uconf)
	.option("-d, --debug", "debug mode, default to daemon mode.")
	.action(function(options){
		var config = Object.assign({}, defs); // clone the default configuration
		if(!options.config){
			options.config = uconf;
		}
		// load the user config file which exists.
		if(fs.existsSync(options.config)){
			config = Object.assign(config, require(options.config));
		}
		var listen_args = config.listen;
		switch(({}).toString.apply(listen_args)){
			case "[object Array]":
				break;
			case "[object String]":
				var m = /(.*?)\:(\d+)$/.exec(bind);
				if(m){
					listen_args = [m[2], m[1]];
					break;
				}
			default:
				listen_args = [listen_args];
		}
		config.port = listen_args[0];
		config.host = listen_args[1];

		if(options.port) config.port = options.port;
		
		// write config to file
		jsonfile.writeFileSync(runtime_file, config);
		if(options.debug){
			require(app_script);
			return;
		}else{
			forever.getAllProcesses(function(err, processes){
				var proc = forever.findByScript(app_script, processes);
				if(proc){
					console.error('error: webjet has already run as pid:'+proc[0].pid+'.');
					return;
				}
				var result = forever.startDaemon(app_script, {
					uid:"webjet",
					pidFile: config.pidfile,
					logFile: config.logfile
				});
				if(result){
					console.log("webjet listening at http://"+config.host+":"+config.port+".");
				}
				
			});
		}
	});

/**
 * stop command
 */
program
	.command('stop')
	.description('stop webjet server.')
	.action(function(){
		forever.getAllProcesses(function(err, processes){
			var proc = forever.findByScript(app_script, processes);
			if(!proc){
				console.error('error: webjet does not running.');
				return;
			}
			forever.stop(app_script);
			console.log("webjet stoped.")
		});
	});


program.parse(process.argv);